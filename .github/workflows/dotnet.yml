name: Build, Test, SonarCloud Analysis, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu"

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Restore dependencies for ReviewService
        run: dotnet restore ./ReviewService/ReviewService/ReviewService.csproj

      - name: Restore dependencies for ReviewServiceTest
        run: dotnet restore ./ReviewServiceTest/ReviewServiceTest.csproj

      - name: Build ReviewService
        run: dotnet build ./ReviewService/ReviewService/ReviewService.csproj --no-restore

      - name: Build ReviewServiceTest
        run: dotnet build ./ReviewServiceTest/ReviewServiceTest.csproj --no-restore

      - name: Run tests with coverage
        run: dotnet test ./ReviewServiceTest/ReviewServiceTest.csproj --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=opencover /p:CoverletOutput=./ReviewServiceTest/TestResults/ /p:Exclude="[ReviewService/ReviewService/Migrations]*"

      - name: Find coverage report
        id: locate-coverage
        run: echo "##[set-output name=path;]$(find ./ReviewServiceTest/TestResults/ -name 'coverage.opencover.xml')"

      - name: Enforce coverage thresholdd
        run: |
          coverage=$(jq -r '.Counters | .covered + .missed as $total | (.covered / $total) * 100' <${{ steps.locate-coverage.outputs.path }})
          echo "Code coverage is $coverage%"
          if (( $(echo "$coverage < 50" | bc -l) )); then
            echo "Code coverage is below 50%"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coveragereport

      - name: Upload test results and coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./ReviewServiceTest/TestResults

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"frederikhendrix_reviewservice" /o:"frederikhendrix" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="${{ steps.locate-coverage.outputs.path }}"

      - name: Build ReviewService (for SonarCloud)
        run: dotnet build ./ReviewService/ReviewService/ReviewService.csproj --no-restore

      - name: Build ReviewServiceTest (for SonarCloud)
        run: dotnet build ./ReviewServiceTest/ReviewServiceTest.csproj --no-restore

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    name: Deploy to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: List files for debugging
        run: ls -R ./ReviewService

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ReviewService
          file: ./ReviewService/ReviewService/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/reviewservice-backend:latest

      - name: Set up Azure CLI
        uses: azure/setup-kubectl@v1
        with:
          version: "latest"

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create Kubernetes secret for ReviewService
        run: |
          kubectl create secret generic reviewservice-secrets \
            --from-literal=postgres-host=${{ secrets.POSTGRES_HOST }} \
            --from-literal=postgres-port=${{ secrets.POSTGRES_PORT }} \
            --from-literal=postgres-db=${{ secrets.POSTGRES_DB }} \
            --from-literal=postgres-user=${{ secrets.POSTGRES_USER }} \
            --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} \
            --from-literal=servicebus-connection-string=${{ secrets.SERVICEBUS_CONNECTION_STRING }} \
            --dry-run=client -o yaml > ./k8s/reviewservice-secrets.yaml
          kubectl apply -f ./k8s/reviewservice-secrets.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl apply -f ./k8s/hpa-reviewservice.yaml

      - name: Force rollout restart
        run: |
          kubectl rollout restart deployment reviewservice-backend
